


# 使用bai2把银行对账文件SimplyConnect-58-2715093-2025-07-11.bai2转为json格式的文件
bai2 format --input /home/eng/Downloads/SimplyConnect-58-2715093-2025-07-11.bai2 > output.json

如下moov-io/bai2的3个源码文件，转为node.js代码, 
要求:
   node.js代码只有一个文件;
   node.js代码输出的output.json个字段的值和顺序，要尽可能保持一致;

关键点说明：
核心转换：
只保留与 Format() 功能相关的文件解析和 JSON 转换逻辑

移除 WebCmd、Parse 和 Print 相关的非必要代码;

数据结构：
完全保留原始 Go 代码中的数据结构
输出 JSON 的字段顺序和结构与 Go 版本尽量一致




cmd/bai2/main.go

// Copyright 2022 The Moov Authors
// Use of this source code is governed by an Apache License
// license that can be found in the LICENSE file.

package main

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"

	"github.com/moov-io/bai2/pkg/lib"
	"github.com/moov-io/bai2/pkg/service"
	baseLog "github.com/moov-io/base/log"
)

var (
	documentFileName string
	ignoreVersion    bool
	documentBuffer   []byte
)

var WebCmd = &cobra.Command{
	Use:   "web",
	Short: "Launches web server",
	Long:  "Launches web server",
	RunE: func(cmd *cobra.Command, args []string) error {
		env := &service.Environment{
			Logger: baseLog.NewDefaultLogger(),
		}

		env, err := service.NewEnvironment(env)
		if err != nil {
			env.Logger.Fatal().LogErrorf("Error loading up environment.", err).Err()
			os.Exit(1)
		}
		defer env.Shutdown()

		env.Logger.Info().Log("Starting web service")
		test, _ := cmd.Flags().GetBool("test")
		if !test {
			shutdown := env.RunServers(true)
			defer shutdown()
		}
		return nil
	},
}

var Parse = &cobra.Command{
	Use:   "parse",
	Short: "parse bai2 report",
	Long:  "Parse an incoming bai2 report",
	RunE: func(cmd *cobra.Command, args []string) error {

		var err error

		scan := lib.NewBai2Scanner(bytes.NewReader(documentBuffer))
		f := lib.NewBai2With(lib.Options{
			IgnoreVersion: ignoreVersion,
		})
		err = f.Read(&scan)
		if err != nil {
			return err
		}

		err = f.Validate()
		if err != nil {
			return errors.New("Parsing report was successful, but not valid")
		}

		log.Println("Parsing report was successful and the report is valid")

		return nil
	},
}

var Print = &cobra.Command{
	Use:   "print",
	Short: "Print bai2 report",
	Long:  "Print an incoming bai2 report after parse",
	RunE: func(cmd *cobra.Command, args []string) error {

		var err error

		scan := lib.NewBai2Scanner(bytes.NewReader(documentBuffer))
		f := lib.NewBai2With(lib.Options{
			IgnoreVersion: ignoreVersion,
		})
		err = f.Read(&scan)
		if err != nil {
			return err
		}

		err = f.Validate()
		if err != nil {
			return err
		}

		fmt.Println(f.String())
		return nil
	},
}

var Format = &cobra.Command{
	Use:   "format",
	Short: "Format bai2 report",
	Long:  "Format an incoming bai2 report after parse",
	RunE: func(cmd *cobra.Command, args []string) error {

		var err error

		scan := lib.NewBai2Scanner(bytes.NewReader(documentBuffer))
		f := lib.NewBai2With(lib.Options{
			IgnoreVersion: ignoreVersion,
		})
		err = f.Read(&scan)
		if err != nil {
			return err
		}

		err = f.Validate()
		if err != nil {
			return err
		}

		body, ferr := json.Marshal(f)
		if ferr != nil {
			return ferr
		}

		fmt.Println(string(body))
		return nil
	},
}

var rootCmd = &cobra.Command{
	Use:   "",
	Short: "",
	Long:  "",
	PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
		isWeb := false
		cmdNames := make([]string, 0)
		getName := func(c *cobra.Command) {}
		getName = func(c *cobra.Command) {
			if c == nil {
				return
			}
			cmdNames = append([]string{c.Name()}, cmdNames...)
			if c.Name() == "web" {
				isWeb = true
			}
			getName(c.Parent())
		}
		getName(cmd)

		if !isWeb {
			if documentFileName == "" {
				path, err := os.Getwd()
				if err != nil {
					log.Fatal(err)
				}
				documentFileName = filepath.Join(path, "bai2.bin")
			}

			_, err := os.Stat(documentFileName)
			if os.IsNotExist(err) {
				return errors.New("invalid input file")
			}

			documentBuffer, err = os.ReadFile(documentFileName)
			if err != nil {
				return err
			}
		}

		return nil
	},
}

func initRootCmd() {
	WebCmd.Flags().BoolP("test", "t", false, "test server")

	rootCmd.SilenceUsage = true
	rootCmd.PersistentFlags().StringVar(&documentFileName, "input", "", "bai2 report file")
	rootCmd.PersistentFlags().BoolVar(&ignoreVersion, "ignoreVersion", false, "set to ignore bai file version in the header")
	rootCmd.AddCommand(WebCmd)
	rootCmd.AddCommand(Print)
	rootCmd.AddCommand(Parse)
	rootCmd.AddCommand(Format)
}

func main() {
	initRootCmd()

	rootCmd.Execute()
}




pkg/lib/reader.go
// Copyright 2022 The Moov Authors
// Use of this source code is governed by an Apache License
// license that can be found in the LICENSE file.

package lib

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"log"
	"strings"
	"unicode"

	"github.com/moov-io/bai2/pkg/util"
)

type Bai2Scanner struct {
	reader      *bufio.Reader
	currentLine *bytes.Buffer
	index       int
}

func NewBai2Scanner(fd io.Reader) Bai2Scanner {
	reader := bufio.NewReader(fd)
	currentLine := new(bytes.Buffer)
	return Bai2Scanner{reader: reader, currentLine: currentLine}
}

func (b *Bai2Scanner) GetLineIndex() int {
	return b.index
}

func (b *Bai2Scanner) GetLine() string {
	return strings.TrimSpace(b.currentLine.String())
}

// ScanLine returns a line from the underlying reader
// arg[0]: useCurrentLine (if false read a new line)
func (b *Bai2Scanner) ScanLine(arg ...bool) string {

	useCurrentLine := false
	if len(arg) > 0 {
		useCurrentLine = arg[0]
	}

	if useCurrentLine {
		return b.GetLine()
	}

	// Reset the read buffer every time we read a new line.
	b.currentLine.Reset()

	for {
		// Read each rune in the file until a newline or a `/` or EOF.
		rune, _, err := b.reader.ReadRune()
		if err != nil {
			if err != io.EOF {
				log.Fatal(err)
			}
			break
		}

		char := string(rune)
		switch char {
		case "/":
			// Add `/` to line if it exists. Parsers use this to help internally represent the delineation
			// between records.
			b.currentLine.WriteString(char)
			// On observing a `/` character, check to see if we have a full record available
			// for processing -- with exception for transaction or continuation records. For those records,
			// the record is terminated by a newline followed by record code.
			line := strings.TrimSpace(b.currentLine.String())
			if strings.HasPrefix(line, util.TransactionDetailCode) || strings.HasPrefix(line, util.ContinuationCode) {
				continue
			}
			goto fullLine
		case "\n", "\r":
			// On observing a newline character, check to see if we have a full record available for processing.
			goto fullLine
		default:
			b.currentLine.WriteString(char)
		}

		continue

		// This routine processes a "full line". In the context of a BAI2 file, a line is a single record
		// and may be terminated either by a `/` or a newline character. In specific circumstances, a logical record
		// ("line") may continue onto the next line, and in that event, processing should read the contents of
		// the following line before considering the record "complete".
	fullLine:
		line := strings.TrimSpace(b.currentLine.String())
		// If the current line has only white space, ignore it and continue reading.
		if blankLine(line) {
			b.currentLine.Reset()
			continue
		}

		// If the line ends with a `/` delimiter, treat it as a complete record and process it as is.
		if strings.HasSuffix(line, "/") {
			break
		}

		// If a line ends with a newline character, look ahead to the next three bytes. If the next line
		// is a new record, it will have a defined and valid record code. If a valid record code is not
		// observed, continue parsing lines until a distinct record is observed.
		bytes, err := b.reader.Peek(3)
		if err != nil && err != io.EOF {
			log.Fatal(err)
		}

		// If the next three bytes are any of the defined BAI2 record codes (followed by a comma), we consider the next line
		// as a new record and process the current line up to this point.
		nextThreeBytes := string(bytes)
		headerCodes := []string{util.FileHeaderCode, util.GroupHeaderCode, util.AccountIdentifierCode, util.TransactionDetailCode, util.ContinuationCode, util.AccountTrailerCode, util.GroupTrailerCode, util.FileTrailerCode}
		nextLineHasNewRecord := false
		for _, header := range headerCodes {
			if nextThreeBytes == fmt.Sprintf("%s,", header) {
				b.currentLine.WriteString("/")
				nextLineHasNewRecord = true
				break
			}
		}

		if nextLineHasNewRecord {
			break
		}

		// Here, the current line "continued" onto the next line without a delimiter and without a new record code on
		// the subsequent line. Parse the next line as though it is a continuation of the current line.
		continue
	}

	b.index++
	return b.GetLine()
}

func blankLine(line string) bool {
	for _, r := range line {
		if !unicode.IsSpace(r) {
			return false
		}
	}
	return true
}


pkg/lib/file.go

// Copyright 2022 The Moov Authors
// Use of this source code is governed by an Apache License
// license that can be found in the LICENSE file.

package lib

import (
	"bytes"
	"errors"
	"fmt"
	"strconv"

	"github.com/moov-io/bai2/pkg/util"
)

/*

FILE STRUCTURE

To simplify processing, balance reporting transmission files are divided into “envelopes” of data.
These envelopes organize data at the following levels:
• Account
• Group
• File

Account:
	The first level of organization is the account. An account envelope includes balance and transaction data.
	Example: Account #1256793 at Last National Bank, previous day information as of midnight.

Group:
	The next level of organization is the group. A group includes one or more account envelopes, all of which represent accounts at the same financial institution.
	All information in a group is for the same date and time.
	Example: Several accounts from Last National Bank to XYZ Reporting Service, sameday information as of 9:00 AM.

File:
	Groups are combined into files for transmission. A file includes data transmitted between one sender and one receiver.
	A file can include groups of data from any number of originating financial institutions destined for any number of ultimate receivers.
	The groups within a file may contain different As-of-Dates and times.

The following list shows multiple groups within a file and multiple accounts within a group:
  Record
   Code 		Record Name 		Purpose
01 			File Header 		Begins File
02 			Group Header 		Begins First Group
03 			Account Identifier 	First Account
16 			Transaction Detail 	First Account Detail
49 			Account Trailer 	Ends First Account
03 			Account Identifier 	Second Account
49 			Account Trailer Ends Second Account
98 			Group Trailer 		Ends First Group
02 			Group Header Begins Second Group
03 			Account Identifier 	Begins Third Account
88 			Continuation Continues Previous 03 Record
49 			Account Trailer Ends Third Account
98 			Group Trailer Ends Second Group
99 			File Trailer Ends File
The preceding example included two groups. The first group included two accounts, the second
included one account. Only the first account of the first group included transaction detail.

*/

// NewBai2With returns a BAI2 file with the default options
func NewBai2() *Bai2 {
	return &Bai2{}
}

// NewBai2With returns a BAI2 file with the specified options
func NewBai2With(options Options) *Bai2 {
	return &Bai2{options: options}
}

// FILE with BAI Format
type Bai2 struct {
	// File Header
	Sender               string `json:"sender"`
	Receiver             string `json:"receiver"`
	FileCreatedDate      string `json:"fileCreatedDate"`
	FileCreatedTime      string `json:"fileCreatedTime"`
	FileIdNumber         string `json:"fileIdNumber"`
	PhysicalRecordLength int64  `json:"physicalRecordLength,omitempty"`
	BlockSize            int64  `json:"blockSize,omitempty"`
	VersionNumber        int64  `json:"versionNumber"`

	// File trailer
	FileControlTotal string `json:"fileControlTotal"`
	NumberOfGroups   int64  `json:"numberOfGroups"`
	NumberOfRecords  int64  `json:"numberOfRecords"`

	// Groups
	Groups []Group

	header  fileHeader
	trailer fileTrailer

	options Options
}

type Options struct {
	IgnoreVersion bool
}

func (r *Bai2) SetOptions(options Options) {
	r.options = options
}

func (r *Bai2) copyRecords() {
	r.header = fileHeader{
		Sender:               r.Sender,
		Receiver:             r.Receiver,
		FileCreatedDate:      r.FileCreatedDate,
		FileCreatedTime:      r.FileCreatedTime,
		FileIdNumber:         r.FileIdNumber,
		PhysicalRecordLength: r.PhysicalRecordLength,
		BlockSize:            r.BlockSize,
		VersionNumber:        r.VersionNumber,
	}

	r.trailer = fileTrailer{
		FileControlTotal: r.FileControlTotal,
		NumberOfGroups:   r.NumberOfGroups,
		NumberOfRecords:  r.NumberOfRecords,
	}
}

// Sums the groups NumberOfRecords plus file header and trailer. Maps to the NumberOfRecords field.
func (f *Bai2) SumRecords() int64 {
	var sum int64
	for _, group := range f.Groups {
		sum += group.NumberOfRecords
	}
	// Add two for the group header and trailer records
	return sum + 2
}

// Sums the number of groups. Maps to the NumberOfGroups field.
func (g *Bai2) SumNumberOfGroups() int64 {
	return int64(len(g.Groups))
}

// Sums the Group Control Totals. Maps to the FileControlTotal field.
func (a *Bai2) SumGroupControlTotals() (string, error) {
	if err := a.Validate(); err != nil {
		return "0", err
	}
	var sum int64
	for _, group := range a.Groups {
		amt, err := strconv.ParseInt(group.GroupControlTotal, 10, 64)
		if err != nil {
			return "0", err
		}
		sum += amt
	}
	return fmt.Sprint(sum), nil
}

func (r *Bai2) String() string {
	r.copyRecords()

	var buf bytes.Buffer
	buf.WriteString(r.header.string() + "\n")
	for i := range r.Groups {
		buf.WriteString(r.Groups[i].String(r.PhysicalRecordLength) + "\n")
	}
	buf.WriteString(r.trailer.string())

	return buf.String()
}

func (r *Bai2) Validate() error {
	r.copyRecords()

	if err := r.header.validate(r.options); err != nil {
		return err
	}

	for i := range r.Groups {
		if err := r.Groups[i].Validate(); err != nil {
			return err
		}
	}

	if err := r.trailer.validate(); err != nil {
		return err
	}

	return nil
}

func (r *Bai2) Read(scan *Bai2Scanner) error {
	if scan == nil {
		return errors.New("invalid bai2 scanner")
	}

	var err error
	for line := scan.ScanLine(); line != ""; line = scan.ScanLine() {

		// find record code
		if len(line) < 3 {
			continue
		}

		switch line[0:2] {
		case util.FileHeaderCode:

			newRecord := fileHeader{}
			_, err = newRecord.parse(line, r.options)
			if err != nil {
				return fmt.Errorf("ERROR parsing file header on line %d (%v)", scan.GetLineIndex(), err)
			}

			r.Sender = newRecord.Sender
			r.Receiver = newRecord.Receiver
			r.FileCreatedDate = newRecord.FileCreatedDate
			r.FileCreatedTime = newRecord.FileCreatedTime
			r.FileIdNumber = newRecord.FileIdNumber
			r.PhysicalRecordLength = newRecord.PhysicalRecordLength
			r.BlockSize = newRecord.BlockSize
			r.VersionNumber = newRecord.VersionNumber

		case util.GroupHeaderCode:

			newGroup := NewGroup()
			err = newGroup.Read(scan, true)
			if err != nil {
				return err
			}

			r.Groups = append(r.Groups, *newGroup)

		case util.FileTrailerCode:

			newRecord := fileTrailer{}
			_, err = newRecord.parse(line)
			if err != nil {
				return fmt.Errorf("ERROR parsing file trailer on line %d (%v)", scan.GetLineIndex(), err)
			}

			r.FileControlTotal = newRecord.FileControlTotal
			r.NumberOfGroups = newRecord.NumberOfGroups
			r.NumberOfRecords = newRecord.NumberOfRecords

			return nil

		default:
			return fmt.Errorf("ERROR parsing file on line %d (unsupported record type %s)", scan.GetLineIndex(), line[0:2])
		}
	}

	return nil
}



/home/eng/Downloads/SimplyConnect-58-2715093-2025-07-11.bai2文件的内容如下:

01,0054692306,2715093,250711,0815,2507110815-58,80,80,2/
02,2715093,122187445,1,250710,0000,USD,2/
03,8063028964,USD/
88,015,285952620,0,/
88,020,307213500,0,/
88,025,171742800,0,/
88,040,285952620,0,/
88,045,285952620,0,/
88,050,307213556,0,/
88,055,172340757,0,/
88,072,0,0,/
88,074,0,0,/
88,075,0,0,/
88,100,2054692,0,/
88,102,0,1,/
88,110,0,0,/
88,400,14790449,0,/
88,402,0,1,/
16,201,2054692,0,FROM XXXXXX9006,,/
88,TRANSFER FROM     DEPOSIT SYSTEM    ACCOUNT                   XXXXXX9006/
16,501,14790449,0,TO   XXXXXX8999,,/
88,TRANSFER TO       DEPOSIT SYSTEM    ACCOUNT                   XXXXXX8999/
49,1850058755,21/
98,1850058755,1,23/
02,2715093,122187445,1,250710,0000,USD,2/
03,8063028999,USD/
88,015,0,0,/
88,020,2769700,0,/
88,025,140689700,0,/
88,040,0,0,/
88,045,0,0,/
88,050,0,0,/
88,055,134651806,0,/
88,072,0,0,/
88,074,0,0,/
88,075,0,0,/
88,100,42141949,0,/
88,102,0,11,/
88,110,0,0,/
88,400,44155749,0,/
88,402,0,12,/
16,201,14790449,0,FROM XXXXXX8964,,/
88,TRANSFER FROM     MONEY MARKET SWEEP                          XXXXXX8964/
16,195,8625000,0,000000000001434,,/
88,FIRST AMERICAN TITLE INSURANCE COMP/
16,195,8400000,0,000000000000539,,/
88,FIDELITY NATL TITLE INSURANCE C/
16,195,2600000,0,000000000001091,,/
88,NORTHSTAR TITLE AGENCY/
16,195,2130000,0,000000000000785,,/
88,STEWART TITLE & TRUST OF TUCSON/
16,195,1405000,0,000000000001158,,/
88,1/PLACER TITLE COMPANY DBA PREMIER/
16,195,1350000,0,000000000001257,,/
88,YAVAPAI TITLE AGENCY INC/
16,195,1087500,0,000000000000490,,/
88,MAGNUS TITLE AGENCY LLC/
16,195,781500,0,000000000001507,,/
88,MAGNUS TITLE AGENCY LLC/
16,195,627500,0,000000000001484,,/
88,ARIZONA PREMIER TITLE LLC/
16,195,345000,0,000000000000459,,/
88,CHICAGO TITLE AGENCY INC. MARICOPA/
16,495,781500,0,000000000000587,,Magnus Title Agenc/
88,Magnus Title Agency/
16,451,38667068,0,RUSS LYON LLC     PA,,/
88,RUSS LYON LLC     PAYROLL           250710-SETT-B731 UPL/
16,451,804405,0,PAYLOAD           WI,,/
88,PAYLOAD           WITHDRAW          RUSS LYON LLC OPERATING ACCOUNT/
16,451,732850,0,BEC15756          PA,,/
88,BEC15756          PAYMENT                             BROKERAGE ENGINE SAAS/
16,475,43512,0,00000032077,00000032077,/
16,475,33180,0,00000034942,00000034942,/
16,475,52453,0,00000034976,00000034976,/
16,475,573300,0,00000034990,00000034990,/
16,475,1718750,0,00000034995,00000034995,/
16,475,335738,0,00000035002,00000035002,/
16,475,12993,0,00000035005,00000035005,/
16,475,400000,0,00000035009,00000035009,/
49,450706602,55/
98,450706602,1,57/
02,2715093,122187445,1,250710,0000,USD,2/
03,8063029006,USD/
88,015,0,0,/
88,020,0,0,/
88,025,17826800,0,/
88,040,0,0,/
88,045,0,0,/
88,050,0,0,/
88,055,17733498,0,/
88,072,0,0,/
88,074,0,0,/
88,075,0,0,/
88,100,2054692,0,/
88,102,0,1,/
88,110,0,0,/
88,400,2054692,0,/
88,402,0,1,/
16,142,2054692,0,PAYLOAD           DE,,/
88,PAYLOAD           DEPOSIT           RUSS LYON LLC CREDIT CARD ACCOUNT/
16,501,2054692,0,TO   XXXXXX8964,,/
88,TRANSFER TO       MONEY MARKET SWEEP                          XXXXXX8964/
49,43779066,21/
98,43779066,1,23/
02,2715093,122187445,1,250710,0000,USD,2/
03,8063029014,USD/
88,015,0,0,/
88,020,0,0,/
88,025,0,0,/
88,040,0,0,/
88,045,0,0,/
88,050,0,0,/
88,055,0,0,/
88,072,0,0,/
88,074,0,0,/
88,075,0,0,/
88,100,0,0,/
88,102,0,0,/
88,110,0,0,/
88,400,0,0,/
88,402,0,0,/
49,0,17/
98,0,1,19/
02,2715093,122187445,1,250710,0000,USD,2/
03,8063029049,USD/
88,015,59362,0,/
88,020,59300,0,/
88,025,59400,0,/
88,040,59362,0,/
88,045,59362,0,/
88,050,59362,0,/
88,055,59362,0,/
88,072,0,0,/
88,074,0,0,/
88,075,0,0,/
88,100,0,0,/
88,102,0,0,/
88,110,0,0,/
88,400,0,0,/
88,402,0,0,/
49,415510,17/
98,415510,1,19/
99,2344959933,5,143/


输出的output.json如下
{"sender":"0054692306","receiver":"2715093","fileCreatedDate":"250711","fileCreatedTime":"0815","fileIdNumber":"2507110815-58","physicalRecordLength":80,"blockSize":80,"versionNumber":2,"fileControlTotal":"2344959933","numberOfGroups":5,"numberOfRecords":143,"Groups":[{"receiver":"2715093","originator":"122187445","groupStatus":1,"asOfDate":"250710","asOfTime":"0000","currencyCode":"USD","asOfDateModifier":2,"groupControlTotal":"1850058755","numberOfAccounts":1,"numberOfRecords":23,"Accounts":[{"accountNumber":"8063028964","currencyCode":"USD","summaries":[{"TypeCode":"015","Amount":"285952620","ItemCount":0,"FundsType":{}},{"TypeCode":"020","Amount":"307213500","ItemCount":0,"FundsType":{}},{"TypeCode":"025","Amount":"171742800","ItemCount":0,"FundsType":{}},{"TypeCode":"040","Amount":"285952620","ItemCount":0,"FundsType":{}},{"TypeCode":"045","Amount":"285952620","ItemCount":0,"FundsType":{}},{"TypeCode":"050","Amount":"307213556","ItemCount":0,"FundsType":{}},{"TypeCode":"055","Amount":"172340757","ItemCount":0,"FundsType":{}},{"TypeCode":"072","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"074","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"075","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"100","Amount":"2054692","ItemCount":0,"FundsType":{}},{"TypeCode":"102","Amount":"0","ItemCount":1,"FundsType":{}},{"TypeCode":"110","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"400","Amount":"14790449","ItemCount":0,"FundsType":{}},{"TypeCode":"402","Amount":"0","ItemCount":1,"FundsType":{}}],"accountControlTotal":"1850058755","numberRecords":21,"Details":[{"TypeCode":"201","Amount":"2054692","FundsType":{"type_code":"0"},"BankReferenceNumber":"FROM XXXXXX9006","CustomerReferenceNumber":"","Text":",TRANSFER FROM     DEPOSIT SYSTEM    ACCOUNT                   XXXXXX9006/"},{"TypeCode":"501","Amount":"14790449","FundsType":{"type_code":"0"},"BankReferenceNumber":"TO   XXXXXX8999","CustomerReferenceNumber":"","Text":",TRANSFER TO       DEPOSIT SYSTEM    ACCOUNT                   XXXXXX8999/"}]}]},{"receiver":"2715093","originator":"122187445","groupStatus":1,"asOfDate":"250710","asOfTime":"0000","currencyCode":"USD","asOfDateModifier":2,"groupControlTotal":"450706602","numberOfAccounts":1,"numberOfRecords":57,"Accounts":[{"accountNumber":"8063028999","currencyCode":"USD","summaries":[{"TypeCode":"015","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"020","Amount":"2769700","ItemCount":0,"FundsType":{}},{"TypeCode":"025","Amount":"140689700","ItemCount":0,"FundsType":{}},{"TypeCode":"040","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"045","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"050","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"055","Amount":"134651806","ItemCount":0,"FundsType":{}},{"TypeCode":"072","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"074","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"075","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"100","Amount":"42141949","ItemCount":0,"FundsType":{}},{"TypeCode":"102","Amount":"0","ItemCount":11,"FundsType":{}},{"TypeCode":"110","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"400","Amount":"44155749","ItemCount":0,"FundsType":{}},{"TypeCode":"402","Amount":"0","ItemCount":12,"FundsType":{}}],"accountControlTotal":"450706602","numberRecords":55,"Details":[{"TypeCode":"201","Amount":"14790449","FundsType":{"type_code":"0"},"BankReferenceNumber":"FROM XXXXXX8964","CustomerReferenceNumber":"","Text":",TRANSFER FROM     MONEY MARKET SWEEP                          XXXXXX8964/"},{"TypeCode":"195","Amount":"8625000","FundsType":{"type_code":"0"},"BankReferenceNumber":"000000000001434","CustomerReferenceNumber":"","Text":",FIRST AMERICAN TITLE INSURANCE COMP/"},{"TypeCode":"195","Amount":"8400000","FundsType":{"type_code":"0"},"BankReferenceNumber":"000000000000539","CustomerReferenceNumber":"","Text":",FIDELITY NATL TITLE INSURANCE C/"},{"TypeCode":"195","Amount":"2600000","FundsType":{"type_code":"0"},"BankReferenceNumber":"000000000001091","CustomerReferenceNumber":"","Text":",NORTHSTAR TITLE AGENCY/"},{"TypeCode":"195","Amount":"2130000","FundsType":{"type_code":"0"},"BankReferenceNumber":"000000000000785","CustomerReferenceNumber":"","Text":",STEWART TITLE \u0026 TRUST OF TUCSON/"},{"TypeCode":"195","Amount":"1405000","FundsType":{"type_code":"0"},"BankReferenceNumber":"000000000001158","CustomerReferenceNumber":"","Text":",1/PLACER TITLE COMPANY DBA PREMIER/"},{"TypeCode":"195","Amount":"1350000","FundsType":{"type_code":"0"},"BankReferenceNumber":"000000000001257","CustomerReferenceNumber":"","Text":",YAVAPAI TITLE AGENCY INC/"},{"TypeCode":"195","Amount":"1087500","FundsType":{"type_code":"0"},"BankReferenceNumber":"000000000000490","CustomerReferenceNumber":"","Text":",MAGNUS TITLE AGENCY LLC/"},{"TypeCode":"195","Amount":"781500","FundsType":{"type_code":"0"},"BankReferenceNumber":"000000000001507","CustomerReferenceNumber":"","Text":",MAGNUS TITLE AGENCY LLC/"},{"TypeCode":"195","Amount":"627500","FundsType":{"type_code":"0"},"BankReferenceNumber":"000000000001484","CustomerReferenceNumber":"","Text":",ARIZONA PREMIER TITLE LLC/"},{"TypeCode":"195","Amount":"345000","FundsType":{"type_code":"0"},"BankReferenceNumber":"000000000000459","CustomerReferenceNumber":"","Text":",CHICAGO TITLE AGENCY INC. MARICOPA/"},{"TypeCode":"495","Amount":"781500","FundsType":{"type_code":"0"},"BankReferenceNumber":"000000000000587","CustomerReferenceNumber":"","Text":"Magnus Title Agenc,Magnus Title Agency/"},{"TypeCode":"451","Amount":"38667068","FundsType":{"type_code":"0"},"BankReferenceNumber":"RUSS LYON LLC     PA","CustomerReferenceNumber":"","Text":",RUSS LYON LLC     PAYROLL           250710-SETT-B731 UPL/"},{"TypeCode":"451","Amount":"804405","FundsType":{"type_code":"0"},"BankReferenceNumber":"PAYLOAD           WI","CustomerReferenceNumber":"","Text":",PAYLOAD           WITHDRAW          RUSS LYON LLC OPERATING ACCOUNT/"},{"TypeCode":"451","Amount":"732850","FundsType":{"type_code":"0"},"BankReferenceNumber":"BEC15756          PA","CustomerReferenceNumber":"","Text":",BEC15756          PAYMENT                             BROKERAGE ENGINE SAAS/"},{"TypeCode":"475","Amount":"43512","FundsType":{"type_code":"0"},"BankReferenceNumber":"00000032077","CustomerReferenceNumber":"00000032077","Text":"/"},{"TypeCode":"475","Amount":"33180","FundsType":{"type_code":"0"},"BankReferenceNumber":"00000034942","CustomerReferenceNumber":"00000034942","Text":"/"},{"TypeCode":"475","Amount":"52453","FundsType":{"type_code":"0"},"BankReferenceNumber":"00000034976","CustomerReferenceNumber":"00000034976","Text":"/"},{"TypeCode":"475","Amount":"573300","FundsType":{"type_code":"0"},"BankReferenceNumber":"00000034990","CustomerReferenceNumber":"00000034990","Text":"/"},{"TypeCode":"475","Amount":"1718750","FundsType":{"type_code":"0"},"BankReferenceNumber":"00000034995","CustomerReferenceNumber":"00000034995","Text":"/"},{"TypeCode":"475","Amount":"335738","FundsType":{"type_code":"0"},"BankReferenceNumber":"00000035002","CustomerReferenceNumber":"00000035002","Text":"/"},{"TypeCode":"475","Amount":"12993","FundsType":{"type_code":"0"},"BankReferenceNumber":"00000035005","CustomerReferenceNumber":"00000035005","Text":"/"},{"TypeCode":"475","Amount":"400000","FundsType":{"type_code":"0"},"BankReferenceNumber":"00000035009","CustomerReferenceNumber":"00000035009","Text":"/"}]}]},{"receiver":"2715093","originator":"122187445","groupStatus":1,"asOfDate":"250710","asOfTime":"0000","currencyCode":"USD","asOfDateModifier":2,"groupControlTotal":"43779066","numberOfAccounts":1,"numberOfRecords":23,"Accounts":[{"accountNumber":"8063029006","currencyCode":"USD","summaries":[{"TypeCode":"015","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"020","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"025","Amount":"17826800","ItemCount":0,"FundsType":{}},{"TypeCode":"040","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"045","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"050","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"055","Amount":"17733498","ItemCount":0,"FundsType":{}},{"TypeCode":"072","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"074","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"075","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"100","Amount":"2054692","ItemCount":0,"FundsType":{}},{"TypeCode":"102","Amount":"0","ItemCount":1,"FundsType":{}},{"TypeCode":"110","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"400","Amount":"2054692","ItemCount":0,"FundsType":{}},{"TypeCode":"402","Amount":"0","ItemCount":1,"FundsType":{}}],"accountControlTotal":"43779066","numberRecords":21,"Details":[{"TypeCode":"142","Amount":"2054692","FundsType":{"type_code":"0"},"BankReferenceNumber":"PAYLOAD           DE","CustomerReferenceNumber":"","Text":",PAYLOAD           DEPOSIT           RUSS LYON LLC CREDIT CARD ACCOUNT/"},{"TypeCode":"501","Amount":"2054692","FundsType":{"type_code":"0"},"BankReferenceNumber":"TO   XXXXXX8964","CustomerReferenceNumber":"","Text":",TRANSFER TO       MONEY MARKET SWEEP                          XXXXXX8964/"}]}]},{"receiver":"2715093","originator":"122187445","groupStatus":1,"asOfDate":"250710","asOfTime":"0000","currencyCode":"USD","asOfDateModifier":2,"groupControlTotal":"0","numberOfAccounts":1,"numberOfRecords":19,"Accounts":[{"accountNumber":"8063029014","currencyCode":"USD","summaries":[{"TypeCode":"015","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"020","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"025","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"040","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"045","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"050","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"055","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"072","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"074","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"075","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"100","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"102","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"110","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"400","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"402","Amount":"0","ItemCount":0,"FundsType":{}}],"accountControlTotal":"0","numberRecords":17,"Details":null}]},{"receiver":"2715093","originator":"122187445","groupStatus":1,"asOfDate":"250710","asOfTime":"0000","currencyCode":"USD","asOfDateModifier":2,"groupControlTotal":"415510","numberOfAccounts":1,"numberOfRecords":19,"Accounts":[{"accountNumber":"8063029049","currencyCode":"USD","summaries":[{"TypeCode":"015","Amount":"59362","ItemCount":0,"FundsType":{}},{"TypeCode":"020","Amount":"59300","ItemCount":0,"FundsType":{}},{"TypeCode":"025","Amount":"59400","ItemCount":0,"FundsType":{}},{"TypeCode":"040","Amount":"59362","ItemCount":0,"FundsType":{}},{"TypeCode":"045","Amount":"59362","ItemCount":0,"FundsType":{}},{"TypeCode":"050","Amount":"59362","ItemCount":0,"FundsType":{}},{"TypeCode":"055","Amount":"59362","ItemCount":0,"FundsType":{}},{"TypeCode":"072","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"074","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"075","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"100","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"102","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"110","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"400","Amount":"0","ItemCount":0,"FundsType":{}},{"TypeCode":"402","Amount":"0","ItemCount":0,"FundsType":{}}],"accountControlTotal":"415510","numberRecords":17,"Details":null}]}]}



